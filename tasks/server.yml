---
- include: eni.yml
  vars:
    private_ip_address: "{{ private_ip }}"
  register: net_if

- name: launch server
  local_action:
    module: ec2
    region: "{{ stack.region }}"
    key_name: "{{ ec2_conf.key_name | default(omit) }}"
    instance_type: "{{ ec2_conf.instance_type }}"
    instance_profile_name: "{{ ec2_conf.instance_profile | default(stack.instance_profile) }}"
    image: "{{ ec2_conf.ami }}"
    zone: "{{ zone }}"
    ebs_optimized: "{{ ec2_conf.ebs_optimized | default(false) }}"
    termination_protection: "{{ ec2_conf.termination_protection | default(True) }}"
    exact_count: 1
    network_interface: "{{ net_if.interface.id }}"
    count_tag:
      Name: "{{ name }}"
    instance_tags:
      Name: "{{ name }}"
      Environment: "{{ stack.env }}"
    volumes: "{{ (ec2_conf.volumes | default(default_volume)) + (ephemeral_volumes[ec2_conf.instance_type]|default([])) }}"
    source_dest_check: "{{ ec2_conf.source_dest_check | default(true) }}"
    user_data: "{{ lookup('template', ec2_conf.user_data | default('userdata.sh')) }}"
    wait: true
  register: instance

- set_fact:
    instance_id: "{{ instance.tagged_instances.0.id }}"

- include: eip.yml
  vars:
    device_id: "{{ instance_id }}"
    ip: "{{ eip }}"
  when: eip is defined

- name: create and attach extra volumes
  local_action:
    module: ec2_vol
    instance: "{{ instance_id }}"
    volume_size: "{{ vol.size }}"
    volume_type: "{{ vol.type }}"
    device_name: "{{ vol.device }}"
    name: "{{ name }}-{{ vol.device }}"
    zone: "{{ zone }}"
    region: "{{ stack.region }}"
  with_items: "{{ ec2_conf.extra_volumes | default([]) }}"
  loop_control:
    loop_var: vol

- name: Setup instance auto-recovery
  ec2_metric_alarm:
    alarm_actions: [
      "arn:aws:automate:{{ stack.region }}:ec2:recover"
    ]
    metric: "StatusCheckFailed_System"
    evaluation_periods: 2
    period: 60
    name: "Instance {{ instance_id }} AutoRecovery"
    state: present
    statistic: "Minimum"
    dimensions: {
      'InstanceId':"{{ instance_id }}"
    }
    description: 'Recover EC2 instance when health checks fail'
    comparison: ">"
    insufficient_data_actions: []
    region: "{{ stack.region }}"
    threshold: 0.0
    namespace: "AWS/EC2"
    ok_actions: []
  when: ec2_conf.autorecover | default(false)

- include: tag-volumes.yml
